---
title: Vektoren und Matrizen
---

In numerischen Anwendungen sind Matrizen und Vektoren allgegenwärtig. In Julia sind die entsprechenden Datentypen und Operationen, so etwa in Matlab, eingebaut. Allerdings müssen für bestimmte Aufgaben weitere Pakete importiert werden.

## Grundlagen

In Julia sind Vektoren und Matrizen Spezialfälle von $n$-dimensionalen Arrays für einen Vektor gilt $n = 1$ und für eine Matrix $n = 2$. Uns wird das in der Regel ausreichen aber prinzipiell kann man auch mit fünfdimensionalen Arrays rechnen.

### Direkte Eingabe

Vektoren und Matrizen lassen sich direkt eingeben.

Die Einträge eines Vektors werden durch Kommata getrennt:

```{julia}
x = [5, 1, 9, 2]
```

Mit einem Leerzeichen werden die Einträge hintereinander angeordnet. Daher erhalten wir mit 

```{julia}
u = [6 4 9 1]
```

eine $1 \times 4$-Matrix (Zeilenvektor). Untereinander anordnen lassen sich die Einträge mit einem Semikolon, die Anweisung

```{julia}
A = [4 2 1 6; 3 2 1 8]
```

erzeugt daher eine Matrix. Die Zeilen lassen sich auch untereinander schreiben

```{julia}
A = [
    4 2 1 6
    3 2 1 8
]
```

was manchmal übersichtlicher ist.

### Spezielle Matrizen und Vektoren

Weiterhin gibt es Funktionen, mit denen sich **spezielle Matrizen und Vektoren** anlegen lassen.

```{julia}
println("Nullvektor: ", zeros(3))
println("Nullmatrix: ", zeros(2, 3))
println("Einsmatrix: ", ones(4, 2))
println("      Wert: ", fill(1.7, 2, 4))
```

Auf die Einheitsmatrix werden wir später eingehen.

Die Funktion `range(a, b, n)` erzeugt $n$ Werte von $a$ bis $b$.

```{julia}
x = range(1, 5, 6)
```

Es handelt sich wieder um ein spezielles Objekt für das die einzelnen Werte erst berechnet werden, wenn man sie braucht. Mit `collect` wird daraus ein Vektor.

```{julia}
collect(x)
```

### Ausgabe

Mit `println` lassen sich mehrere Objekte in einem Codeblock ausgeben:

```{julia}
println("x = ", x)
println("A = ", A)
```

Die Einträge der Matrix stehen dabei in einer Zeile, das mehrzeilig hinzubekommen geht in Julia nicht mit einfachen Mitteln (soweit es der Autor weiß).

### Elemente an Vektoren anhängen

Häufig ist es praktisch, einen Vektor Schritt für Schritt mit Inhalt zu füllen. Hierfür gibt es die Funktionen `push!` und `append!`.

Wir beginnen mit einem leeren Vektor:

```{julia}
a = []
```

Mit `push!` wird ein einzelnes Element angehängt:

```{julia}
push!(a, 99)
println("a = ", a)
```

Mehrere Elemente aus einem anderen Vektor lassen sich mit `append!` hinzufügen:

```{julia}
append!(a, [7, 6, 5, 4])
println("a = ", a)
```

Sollen Elemente an erster Stelle eingefügt werden, geht das mit den Funktionen `pushfirst!` und `prepend!`. Und auch hier wieder: Das Ausrufungszeichen am Ende der Funktion macht deutlich, dass ein Funktionsparameter verändert wird.

### Vektoren und Matrizen kombinieren

Vektoren und Matrizen können mithilfe der eckigen Klammern zusammengesetzt werden. Zum Testen verwenden wir

```{julia}
a = [1, 2, 3]
b = [9, 4, 7]
A = [1 2 3; 9 8 7; 2 2 1]
B = [7 2 1; 1 6 7; 9 9 9];
```

(das Semikolon unterdrückt die Ausgabe).

Die Vektoren `a` und `b` in einem langen Vektor:

```{julia}
[a; b]
```

Matrix mit den Spaltenvektoren `a` und `b`:

```{julia}
[a b]
```

Die Matrix mit den Zeilenvektoren `a` und `b` entsteht, wenn die Transponierten der Vektoren untereinander angeordnet werden:

```{julia}
[a'; b']
```

Es lassen sich auch Matrizen verbinden, und zwar untereinander

```{julia}
[A; B]
```

und nebeneinander

```{julia}
[B A]
```

Das ist natürlich nur möglich, wenn die Anzahl der Zeilen oder Spalten zusammenpasst.

Eine alternative Möglichkeit Vektoren zu einer Matrix zu kombinieren ist `stack`. Diese Funktion hängt Vektoren aus einer Liste aneinander. Dabei gibt `dims` die Anordnung an (1 = Untereinander/Zeilenvektoren, 2 = Nebeneinander/Spaltenvektoren).

```{julia}
a = [1, 2, 3, 4]
b = [6, 5, 4, 3]
c = [9, 1, 8, 2]
stack([a, b, c], dims=1)
```

```{julia}
stack([a, b, c], dims=2)
```

### Einträge neu anordnen

Manchmal ist es nützlich, die Einträge einer Matrix in einem Vektor anzuordnen und umgekehrt. Dies geht mit der Funktion `reshape`. Hier ein Beispiel:

```{julia}
A = [
    1 4 7 10
    2 5 8 11
    3 6 9 12
]

x = reshape(A, :)
x
```

Der erste Parameter von `reshape` ist das Ausgangsobjekt, danach kommt die Dimension des Zielobjekts. Wird hier nur ein Wert angegeben, ist das Ergebnis ein Vektor. Mit dem Doppelpunkt wird die Anzahl der Einträge automatisch festgelegt. Außerdem ist zu sehen, dass die Werte spaltenweise ausgelesen werden.

Umgekehrt kann man aus dem Vektor auch wieder eine Matrix erzeugen:

```{julia}
B = reshape(x, 2, :)
B
```

Interessanterweise verwenden die Objekte `A, B, x` alle denselben Speicherbereich für die Zahlenwerte:

```{julia}
x[2] = 999
B
```

Wird `x` geändert dann wirkt sich das auch auf `B` aus. Häufig ist das erwünscht, man spart Speicher und Rechenzeit. Will man das neue Objekt jedoch unabhängig verändern, dann muss eine Kopie angefertigt werden:

```{julia}
C = copy(reshape(x, 3, :))
x[3] = 777
C
```

### Eigenschaften von Vektoren und Matrizen

Die Eigenschaften eines Arrays lassen sich mit verschiedenen Funktionen abfragen.

```{julia}
println("  length(x) = ", length(x), " (Anzahl der Einträge in x)")
println("   ndims(A) = ", ndims(A))
println("    size(A) = ", size(A))
println(" size(A, 1) = ", size(A, 1))
println(" size(A, 2) = ", size(A, 2))
println("  length(A) = ", length(A), " (Anzahl der Einträge in A)")
```

### Auf Einträge zugreifen

Um auf die Einträge von Arrays zuzugreifen verwendet man eckige Klammern `[]`, die Indizierung beginnt bei 1. Bei Matrizen werden Zeilen- und Spaltenindex durch ein Komma getrennt.

```{julia}
A[1, 2] = 999
print("A = ")
display(A)
println("x[0] = ", x[2])
```

Mit `end` wird vom Ende des Arrays gezählt. Dabei liefert `end` das letzte Element, `end - 1` das vorletzte, usw.

```{julia}
print("A = ")
display(A)
println("A[end, end-2] = ", A[end, end-1])
```

Häufig möchte man in einem Rechenschritt auf mehrere Einträge eines Arrays gleichzeitig zugreifen. Hierfür gibt es zwei Möglichkeiten:

-   Den Doppelpunkt-Operator
-   Die Indizierung mithilfe von Integer-Arrays

#### Doppelpunkt-Operator

Die Schreibweisen `start:stop` oder `start:inc:stop` zur Erzeugung einer Sequenz von Zahlen haben wir bereits kennengelernt. Eine solche Sequenz kann zur Indizierung verwendet werden:

```{julia}
y = [9; 3; 5; 1; 7; 4; 99]
println("y = ", y)
println("y[2:4] = ", y[2:5])
println("y[3:end] = ", y[3:end])
```

Offenbar kann man auch hier wieder `end` verwenden.

Setzt man nur den Doppelpunkt ein, dann werden alle Einträge aus der entsprechenden Zeile oder Spalte selektiert.

```{julia}
A = [1 2 3 4 5; 5 6 7 8 9; 9 10 11 12 13]
println("A =")
display(A)

println("Zweite Zeile: ", A[2, :])
println("Dritte Spalte: ", A[:, 3])
```

Auf diese Weise lässt sich auch ein zusammenhängender Bereich auswählen:

```{julia}
println("A[1:2, 3:5] = ")
display(A[1:2, 3:5])
```

Die Adressierung mit dem Doppelpunkt funktioniert auch bei Zuweisungen. Hier ein Beispiel:

```{julia}
A[1:3, 3:4] = [111 222; 777 888; 999 444]
println("A =")
display(A)
```

Wichtig dabei ist, dass die Dimensionen links und rechts vom Gleichheitszeichen zusammenpassen.

#### Index-Arrays

Mithilfe von Index-Arrays lassen sich nicht-fortlaufende Bereiche adressieren. Das funktioniert für Vektoren

```{julia}
x = [8, 1, 9, 11, 3, 2, 8]
println("x = ", x)
println("x[3, 2, 1] = ", x[[3, 2, 1]])
x[[1 3 7]] = [11 33 77]
println("x = ", x)
```

und Matrizen

```{julia}
println("A[[3, 1], [5, 1, 2]] = ")
display(A[[3, 1], [5, 1, 2]])
```

#### Boolsche Indizierung

Wird ein Array mit Wahrheitswerten zur Indizierung verwendet, dann werden alle Werte herausgesucht, für die der Index wahr ist:

```{julia}
x = [6, 1, 9, 2, 4]
x[[true, false, true, false, true]]
```

Manchmal ist das im Zusammenhang mit einer elementweisen Vergleichsoperation praktisch. Hier werden zum Beispiel alle Werte herausgesucht, die größer als 2 sind.

```{julia}
idx = x .> 2
println("  idx  = ", idx)
println("x[idx] = ", x[idx])
```

Wie immer dient der Punkt vor dem \> - Zeichen dazu, eine Operation für mehrere Elemente eines Vektors oder eines Arrays auszuführen.

## Rechnen mit Matrizen und Vektoren

In Julia ist es möglich, Rechnungen mit Matrizen und Vektoren sehr kompakt und fast wie auf dem Papier aufzuschreiben.

### Rechenoperation

Die mathematischen Operatoren `+, -, *` sind so definiert, wie wir das aus der Mathematik kennen, wobei man für das Matrix-Vektor-Produkt $\mathbf{A}\mathbf{x}$ in Julia `A*x` schreibt.

```{julia}
x = [5; 1; 6]
```

```{julia}
y = [9; 13; 8]
```

```{julia}
A = [1 2 3; 5 4 3]
```

```{julia}
B = [1 1; 2 2; 3 3]
```

```{julia}
x + 2 * y
```

Eine Besonderheit in Julia ist, dass man das \*-Zeichen zwischen einer Zahl und einer Variablen auch weglassen kann:

```{julia}
5x - 2y
```

```{julia}
A * x
```

```{julia}
A * B
```

Mit einem angehängten Apostroph `'` wird eine Matrix oder eines Vektors transponiert.

```{julia}
A'
```

```{julia}
x'
```

Dabei ist die Transponierte eines Vektors ein Zeilenvektor, also eine $1xn$-Matrix. Lassen Sie sich hier von dem Wort `adjoint` nicht abschrecken, für uns hat es keine tiefergehende Bedeutung.

Wird ein Spaltenvektor mit einem Zeilenvektor multipliziert, dann entsteht eine Matrix, die dyadisches (oder äußeres) Produkt der Vektoren genannt wird. Das Beispiel

$$
\begin{pmatrix} 1 \\ 2 \\ 3 \end{pmatrix}(5 \; 3 \; 7 \; 8)
=
\begin{pmatrix}
  5 & 3 & 7  & 8 \\
 10 & 6 & 14 & 16 \\
 15 & 9 & 21 & 24
\end{pmatrix}
$$

wird in Julia mit

```{julia}
x = [1, 2, 3]
y = [5 3 7 8]

x * y
```

berechnet (beachten Sie, dass in `y` keine Kommas stehen, das ist also ein Zeilenvektor). Das dyadische Produkt von $\mathbf{x}$ mit sich selber erhalten wir mit

```{julia}
x * x'
```

### Schleifen

Die Laufvariable einer `for`-Schleife kann entweder direkt über die Einträge laufen

```{julia}
x = [1, 2, 3, 4]
A = [5 4 3 2; 1 9 3 2]

for v in x
    print(v, " ")
end
println()
for v in A
    print(v, " ")
end
println()
```

oder man verwendet eine Zählvariable

```{julia}
for i = 1:length(x)
    print(x[i], " ")
end
println()
for i = 1:size(A, 1), j = 1:size(A, 2)
    print(A[i, j], " ")
end
println()
```

Beachten Sie bei der Matrix die Reihenfolge, in der die Elemente ausgegeben werden.

### Elementweise Operationen

Manchmal möchte man Operationen elementweise anwenden, zum Beispiel zu jedem Eintrag des Vektors eine Zahl addieren oder für alle Einträge den Sinus berechnen. Hierzu wird in Julia (das ist durchgängig so) an die Funktion oder den Operator ein Punkt angehängt (in Matlab gibt es die Konvention auch, dort ist sie aber nicht durchgängig umgesetzt).

```{julia}
x = [1, 2, 3, 4]
x .+ 5
```

```{julia}
sin.(x)
```

Das Prinzip funktioniert auch wenn beide Operanden Arrays sind, zum Beispiel führt `.*` eine Elementweise Multiplikation aus.

```{julia}
x .* y
```

Für eine Matrix und einen Vektor werden elementweise Operationen spaltenweise ausgeführt:

```{julia}
A = [1 2 3 4
    5 6 7 9]
x = [2, 4]

A .* x
```

### Lineare Algebra

Funktionen aus dem Bereich der linearen Algebra, etwa zum Lösen linearer Gleichungssysteme, befinden sich im Paket `LinearAlgebra`. Um die entsprechenden Funktionen zu nutzen, wird zunächst das Paket importiert.

```{julia}
using LinearAlgebra
```

#### Skalar- und Kreuzprodukt

Wir beginnen mit dem Skalarprodukt von zwei Vektoren. Das Skalarprodukt von zwei Vektor berechnet `dot` oder der `⋅` (Eingabe mit `\cdot`)

```{julia}
x = [1, 2, 3]
y = [3, 2, 1]
println("x ⋅ y = ", x ⋅ y)
println("dot(x, y) = ", dot(x, y))
```

Das Kreuzprodukt von zwei Vektoren wird mit `cross` berechnet, es gibt dafür kein eigenes Symbol.

```{julia}
u = [3, 2, 1]
v = [5, -1, 4]
w = cross(u, v)

println("u = ", u)
println("v = ", v)
println("w = (u x v) = ", w)
println("Natürlich gilt u ⋅ w = ", u ⋅ w, " und v ⋅ w = ", v ⋅ w)
```

Denken Sie daran, dass das Kreuzprodukt nur für Vektoren mit drei Komponenten vereinbart ist.

#### Lineare Gleichungssysteme

Lineare Gleichungssysteme lassen sich mit dem `\` - Operator lösen.

```{julia}
A = [5 2; 6 1]
b = [5; 2]
x = A \ b
```

Die Verwendung des `\`-Operators kann man sich schlecht merken (findet der Autor). Vielleicht hilft folgende Erklärung. Auf Englisch heißt der Operator *left-division* Operator, was sich folgendermaßen verstehen lässt. Wir beginnen mit dem einfachen Fall der skalaren Gleichung $ax = b$, die man dadurch löst, dass man auf beiden Seiten durch $a$ dividiert und damit $ax / a = b / a$ also $x = b/a$ erhält. Für die Vektorgleichung

$$
    \mathbf{A}\mathbf{x} = \mathbf{b}
$$

kann man aber nicht einfach durch $\mathbf{A}$ teilen. Man schreibt stattdessen

$$
    \mathbf{A} \backslash \mathbf{A} \mathbf{x} = \mathbf{A} \backslash \mathbf{b}
$$

und meint mit $\mathbf{A} \backslash$ nichts anderes als die Multiplikation mit der Inversen $\mathbf{A}^1$. Also sozusagen dividieren von links, daher der Divisionsstrich in die andere Richtung. Mit dieser Überlegung ist

$$
    \underbrace{\mathbf{A} \backslash \mathbf{A}}_\mathbf{I} \mathbf{x} = \mathbf{A} \backslash \mathbf{b} \iff \mathbf{x} = \mathbf{A} \backslash \mathbf{b}
$$

und die Schreibweise damit durchaus sinnvoll. Mit $\mathbf{I}$ ist die Einheitsmatrix gemeint, im Zweifelsfall nochmal im Skript Mathematik I nachlesen. Und: Googeln Sie mal '*matrix left division*' - die Schreibweise ist ziemlich weit verbreitet.

Zum Schluss noch die obligatorische Kontrolle

```{julia}
A * x - b
```

#### Einheitsmatrix

Für die Einheitsmatrix

$$
    \mathbf{I} 
    =
    \left[
        \begin{array}{ccccc}
            1 & 0 & 0 & \cdots & 0 \\
            0 & 1 & 0 & \cdots & 0 \\
            0 & 0 & 1 & \cdots & 0 \\
            \vdots & \vdots & \vdots & \ddots & \vdots \\
            0 & 0 & 0 & \cdots & 1
        \end{array}
    \right]
$$

wird in Julia das Symbol `I` verwendet, für das man keine Größe angeben muss, es funktioniert, wie man das aus der Mathematik kennt. Zum Beispiel bei der Multiplikation mit einem Vektor

```{julia}
I * u
```

oder der Addition zu einer anderen Matrix (auf der Diagonalen von $A$ stehen $5$ und $1$).

```{julia}
A + I
```

Exkurs: Interessanterweise belegt `I` dabei genau ein Byte Speicherplatz, während Vektoren einen gewissen Overhead und für jeden double-Werte 8 Bytes benötigen.

```{julia}
println("Einheitsmatrix: ", Base.summarysize(I))
println("Speicher für Vektor mit   3 Elementen: ", Base.summarysize([1.0, 2.0, 3.0]))
println("Speicher für Vektor mit   4 Elementen: ", Base.summarysize([1.0, 2.0, 3.0, 4.0]))
```

Die Nullen werden also gar nicht gespeichert. Wie funktioniert das? In Julia können Funktionen und Operatoren unterschiedlich für verschiedene Datentypen implementiert werden. Es gibt also eine spezielle Version von `*` für die Einheitsmatrix und einen Vektor, der einfach den Vektor zurückliefert. Das ist eine sehr schöne Anwendung eines der fundamentalen Konzepte von Julia, dem *Multiple Dispatch*. Ein Vortrag zum Thema gibt es unter https://youtu.be/kc9HwsxE1OY, Stefan Karpinski ist einer der Autoren von Julia, dementsprechend ist er ziemlich begeistert von der Sache. Trotzdem intressant.

### Weitere Funktionen für Matrizen und Vektoren

Auswahl arithmetischer Funktionen:

```{julia}
x = [5, 4, 1, -6, 10]
A = [-3 3 9; 4 3 -2]

println("     |x| = ", norm(x))
println(" min{xi} = ", minimum(x))
println("max{Aij} = ", maximum(A))
println("max{Ai_} = ", maximum(A, dims=1), " (größter Wert aus jeder Spalte)")
println("max{A_i} = ", maximum(A, dims=2), " (größter Wert aus jeder Zeile)")
println("     Σxi = ", sum(x))
println("    ΠAij = ", prod(A))
```

Die Functionen `eachcol` und `eachrow` geben eine List der Spalten- bzw. Zeilenvektoren zurück:

```{julia}
A = [1 2 3 4; 8 7 6 5; 9 1 8 2]

eachrow(A)
```

Damit kann man dann zum Beispiel die Zeilensummennorm

$$
\| A \|_\infty =  \max_{i=1, \ldots ,m}{\sum_{j=1}^n | a_{ij} |}
$$

berechnet werden:

```{julia}
maximum(sum.(eachrow(abs.(A))))
```

Natürlich gibt es dafür auch eine eingebaute Funktion:

```{julia}
opnorm(A, Inf)
```