---
title: Plots mit Matplotlib
jupyter: python3
---


Mit dem Python-Paket [matplotlib](https://matplotlib.org) lassen sich eine Vielzahl verschiedener Plots erstellen, 
[hier](https://matplotlib.org/stable/tutorials/introductory/sample_plots.html#sphx-glr-tutorials-introductory-sample-plots-py) eine Sammlung von Beispielen. 

Wie immer muss die Bibliothek importiert werden. Für uns interessant ist das Paket `matplotlib.pyplot`, als Kürzel hat sich dafür `plt` eingebürgert. Besonders gut funktioniert matplotlib zusammen mit den Paketen NumPy und math, die wir gleich mit importieren.


```{python}
from math import *
import numpy as np
import matplotlib.pyplot as plt
```

## Linienplots

Linienplots erstellt man mit der Funktion `plot`, im einfachsten Fall werden zwei Listen oder NumPy-Arrays übergeben, in denen
$x$-Koordinaten und $y$-Koordinaten stehen. Die `plot`-Funktion verbindet diese Punkte, so dass ein Polygonzug entsteht. 

```{python}
plt.plot([0, 3, 3, 2, 1], [0, 0, 2, 2, 1])
plt.show()
```

Um **Funktionen** zu **plotten** geht man genau so vor, allerdings verwendet man dann so viele Punkte, dass sich der
Plot für das Auge wie eine glatte Kurve darstellt. Die textuelle Ausgabe des Plotobjekts (siehe oben) können 
wir mit einem Semikolon unterdrücken.

```{python}
x = np.linspace(0, 2 * pi, 100)
y = np.sin(x)
plt.plot(x, y)
plt.show()
```

**Mehrere Funktionen** lassen sich plotten, indem die `plot` - Funktion mehrfach hintereinander aufgerufen wird. 
Hier die Sinusfunktion, die Kosinusfunktion und die Nullfunktion in einem Plot.

```{python}
x = np.linspace(-pi, 6 * pi, 100)
y1 = np.sin(x)
y2 = np.cos(x)
plt.plot(x, y1)
plt.plot(x, y2)
plt.plot([x.min(), x.max()], [0, 0])
plt.show()
```

Eine zweite Möglichkeit mehrere Graphen zu erstellen besteht darin, eine Liste mit $x$-Werten und eine Matrix zu übergeben. Dabei stehen in jeder Spalte
der Matrix die jeweiligen Funktionswerte. Die Anzahl der Zeilen der Matrix muss dabei gleich der Anzahl der $x$-Werte sein, die
Anzahl der Spalten ist die Anzahl der zu plottenden Funktionen.

```{python}
plt.plot(x, np.array([y1, y2]).T)
plt.show()
```

### Plots beschriften

Es gibt eine Reihe von Funktionen um Plots zu beschriften und die Art der Darstellung zu beeinflussen. 
Die wichtigsten hier in einem Beispiel, eine ausführlichere Beschreibung gibt es im 
[offiziellen Tutorial](https://matplotlib.org/stable/tutorials/introductory/pyplot.html#sphx-glr-tutorials-introductory-pyplot-py)
oder [hier](https://www.python-kurs.eu/matplotlib.php) in deutscher Sprache.
.

```{python}
plt.plot(x, np.array([y1, y2]).T)
plt.legend(['sin(x)', 'cos(x)'])
plt.title('Trigonometrische Funktionen')
plt.xlabel('x')
plt.ylabel('y')
plt.grid(True)
plt.show()
```

## Streuplots

Punkte lassen sich mit `scatter` darstellen:

```{python}
x = np.linspace(0, 2*pi, 20)
y = np.sin(x)
plt.scatter(x, y)
plt.show()
```

Es gibt eine große Auswahl an Möglichkeiten, den Plot zu verändern:

```{python}
plt.scatter(x, y, marker='*', s=200, c='hotpink', linewidths=1, edgecolors='green')
plt.show()
```

Mehr Informationen finden Sie in der [Dokumentation](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html).

## In einer Schleife plotten

Es soll die Funktionenschar $f_n(x) = \sin(nx)$ für $n = 0, \dots, 5$ geplottet werden. Mithilfe von

```{python}
def make_fn(n):
    def fn(x):
        return np.sin(n * x)
    return fn
```

erzeugen wir die einzelnen Funktionen, die sich dann in einer Schleife plotten lassen.

```{python}
x = np.linspace(0, 2*pi, 500)
l = []
for i in range(0, 6):
    l.append(f"n = {i}")
    y = make_fn(i)(x)
    plt.plot(x, y)
plt.legend(l)
plt.show()
```

## Kreise und Rechtecke

Kreise und Rechtecke lassen sich mit der `poly`-Funktion darstellen (hierfür muss das Modul `Makie.GeometryBasics` geladen werden). 

```{python}
import matplotlib.patches as pltp
import matplotlib.collections as pltc

patches = []
patches.append(pltp.Rectangle([3, 0], 2, 2, color='white'))
patches.append(pltp.Rectangle([0, 0], 2, 2, color='hotpink'))
patches.append(pltp.Rectangle([1, 1], 4, 2, color='skyblue'))
patches.append(pltp.Circle([1, 2], 1, color='orange'))

pc = pltc.PatchCollection(patches, edgecolor='black', alpha=0.6, match_original=True)
plt.gca().add_collection(pc)
plt.axis('equal')
plt.show()
```

```{python}
# patches = []
# patches.append(pltp.Rectangle([3, 0], 2, 2, color='white'))
# patches.append(pltp.Rectangle([0, 0], 2, 2, color='hotpink'))
# patches.append(pltp.Rectangle([1, 1], 4, 2, color='skyblue'))
# patches.append(pltp.Circle([1, 2], 1, color='orange'))

# pc = pltc.PatchCollection(patches, edgecolor='black', alpha=0.6, match_original=True)
# plt.gca().add_collection(pc)

plt.figure()

ax = plt.gca()
ax.add_patch(plt.Rectangle([3, 0], 2, 2, edgecolor='black', facecolor='green', facealpha=0.5, lw=5))
ax.add_patch(plt.Rectangle([0, 0], 2, 2, edgecolor='black', color='hotpink', alpha=0.5))

plt.xlim(-0.5, 5.5)
plt.ylim(-0.5, 3.5)
plt.axis('equal')
plt.show()
```

Beachten Sie:

- Die vorletzte Zeile sorgt dafür, dass beide Achsen denselben Skalierungsfaktor verwenden (Kreis als Kreis).

## Polygonnetze und Farbskala

In diesem Beispiel wird eine Liste von Polygonen erzeugt und anhand von Zahlenwerten eingefärbt.

```{python}
patches = []
patches.append(pltp.Polygon([[0, 0], [2, 0], [0, 2]]))
patches.append(pltp.Polygon([[1, 1], [2, 1], [1, 2], [0, 2]]))
patches.append(pltp.Polygon([[1.5, 0], [2, 0], [2, 2], [1.5, 2]]))
pc = pltc.PatchCollection(patches, alpha=0.5, edgecolor='black')
plt.gca().add_collection(pc)
pc.set_array([3,1,2])
pc.set_cmap('inferno')
plt.axis('equal')
plt.colorbar(pc)
plt.show()
```

- Das Schema, nach dem die Zahlenwerte einer Farbe zugeordnet werden heißt Colormap (hier `inferno`), die verschiedenen Möglichkeiten finden Sie in der [Dokumentation](https://matplotlib.org/stable/users/explain/colors/colormaps.html).

## Pfeile

Pfeile zur Darstellung von Vektoren (zum Beispiel Kräften an Stabtragwerken) lassen sich mit `plt.quiver(x, y, u, v)` erzeugen. Dabei sind `x`, `y` die Koordinaten der Startpunkte und `u`, `v` die Komponenten der zu plottenden Vektoren.

```{python}
x = np.array([1, 2, 3, 1, 2, 3])
y = np.array([0, 0, 0, 1, 1, 1])
u = np.array([10,  0, -40,  20, 0, -40])
v = np.array([30, 20,  10, -10, 0, -20])

fig, ax = plt.subplots(2, 2)
ax[0, 0].quiver(x, y, u, v)
ax[0, 0].set_title('Keine Skalierung')
ax[0, 1].quiver(x, y, u, v, scale=300)
ax[0, 1].set_title('scale=300')
ax[1, 0].quiver(x, y, u, v, scale=150)
ax[1, 0].set_title('scale=150')
ax[1, 1].quiver(x, y, 10*u, 10*v, scale=1500, width=0.005, color='hotpink')
ax[1, 1].set_title('10*u, 10*v, scale=1500')
plt.subplots_adjust(wspace=0.3, hspace=0.5)
plt.show()
```

Funktionsweise:

- Hat ein Vektor die Länge 0 wird er nicht dargestellt
- Standardmäßig sind die Pfeillängen proportional zur Länge der Vektoren
- Möchte man die Länge anpassen, muss der Skalierungsfaktor selber gewählt werden
- Je größer der Wert von `scale` umso kürzer die Pfeile
- Linienstärke und Farbe lassen sich mit `width` und `color` anpassen